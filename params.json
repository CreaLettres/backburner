{"name":"Backburner","tagline":"Simple and reliable beanstalkd job queue for ruby","google":"","body":"# Backburner\r\n\r\nBackburner is a [beanstalkd](http://kr.github.com/beanstalkd/)-powered job queue that can handle a very high volume of jobs.\r\nYou create background jobs and place them on multiple work queues to be processed later.\r\n\r\nProcessing background jobs reliably has never been easier than with beanstalkd and Backburner. This gem works with any ruby-based\r\nweb framework, but is especially suited for use with [Sinatra](http://sinatrarb.com), [Padrino](http://padrinorb.com) and Rails.\r\n\r\nIf you want to use beanstalk for your job processing, consider using Backburner.\r\nBackburner is heavily inspired by Resque and DelayedJob. Backburner stores all jobs as simple JSON message payloads.\r\nPersistent queues are supported when beanstalkd persistence mode is enabled.\r\n\r\nBackburner supports multiple queues, job priorities, delays, and timeouts. In addition, \r\nBackburner has robust support for retrying failed jobs, handling error cases,\r\ncustom logging, and extensible plugin hooks.\r\n\r\n## Why Backburner?\r\n\r\nBackburner is well tested and has a familiar, no-nonsense approach to job processing, but that is of secondary importance.\r\nLet's face it, there are a lot of options for background job processing. [DelayedJob](https://github.com/collectiveidea/delayed_job),\r\nand [Resque](https://github.com/defunkt/resque) are the first that come to mind immediately. So, how do we make sense\r\nof which one to use? And why use Backburner over other alternatives?\r\n\r\nThe key to understanding the differences lies in understanding the different projects and protocols that power these popular queue\r\nlibraries under the hood. Every job queue requires a queue store that jobs are put into and pulled out of.\r\nIn the case of Resque, jobs are processed through **Redis**, a persistent key-value store. In the case of DelayedJob, jobs are processed through\r\n**ActiveRecord** and a database such as PostgreSQL.\r\n\r\nThe work queue underlying these gems tells you infinitely more about the differences than anything else.\r\nBeanstalk is probably the best solution for job queues available today for many reasons.\r\nThe real question then is... \"Why Beanstalk?\".\r\n\r\n## Why Beanstalk?\r\n\r\nIllya has an excellent blog post\r\n[Scalable Work Queues with Beanstalk](http://www.igvita.com/2010/05/20/scalable-work-queues-with-beanstalk/) and\r\nAdam Wiggins posted [an excellent comparison](http://adam.heroku.com/past/2010/4/24/beanstalk_a_simple_and_fast_queueing_backend/).\r\n\r\nYou will quickly see that **beanstalkd** is an underrated but incredible project that is extremely well-suited as a job queue.\r\nSignificantly better suited for this task than Redis or a database. Beanstalk is a simple,\r\nand a very fast work queue service rolled into a single binary - it is the memcached of work queues.\r\nOriginally built to power the backend for the 'Causes' Facebook app, it is a mature and production ready open source project.\r\n[PostRank](http://www.postrank.com) uses beanstalk to reliably process millions of jobs a day.\r\n\r\nA single instance of Beanstalk is perfectly capable of handling thousands of jobs a second (or more, depending on your job size)\r\nbecause it is an in-memory, event-driven system. Powered by libevent under the hood,\r\nit requires zero setup (launch and forget, à la memcached), optional log based persistence, an easily parsed ASCII protocol,\r\nand a rich set of tools for job management that go well beyond a simple FIFO work queue.\r\n\r\nBeanstalkd supports the following features out of the box:\r\n\r\n| Feature | Description                     |\r\n| ------- | ------------------------------- |\r\n| **Parallelized**    | Supports multiple work queues created on demand. |\r\n| **Reliable**        | Beanstalk’s reserve, work, delete cycle ensures reliable processing. |\r\n| **Scheduling**      | Delay enqueuing jobs by a specified interval to schedule processing later |\r\n| **Fast**            | Processes thousands of jobs per second without breaking a sweat. |\r\n| **Priorities**      | Specify priority so important jobs can be processed quickly. |\r\n| **Persistence**     | Jobs are stored in memory for speed, but logged to disk for safe keeping. |\r\n| **Federation**      | Horizontal scalability provided through federation by the client. |\r\n| **Error Handling**  | Bury any job which causes an error for later debugging and inspection.|\r\n\r\nKeep in mind that these features are supported out of the box with beanstalk and require no special code within this gem to support.\r\nIn the end, **beanstalk is the ideal job queue** while also being ridiculously easy to install and setup.\r\n\r\n## Installation\r\n\r\nFirst, you probably want to [install beanstalkd](http://kr.github.com/beanstalkd/download.html), which powers the job queues.\r\nDepending on your platform, this should be as simple as (for Ubuntu):\r\n\r\n    $ sudo apt-get install beanstalkd\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'backburner'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install backburner\r\n\r\n## Configuration ##\r\n\r\nBackburner is extremely simple to setup. Just configure basic settings for backburner:\r\n\r\n```ruby\r\nBackburner.configure do |config|\r\n  config.beanstalk_url    = [\"beanstalk://127.0.0.1\", \"...\"]\r\n  config.tube_namespace   = \"some.app.production\"\r\n  config.on_error         = lambda { |e| puts e }\r\n  config.max_job_retries  = 3 # default 0 retries\r\n  config.retry_delay      = 2 # default 5 seconds\r\n  config.default_priority = 65536\r\n  config.respond_timeout  = 120\r\n  config.default_worker   = Backburner::Workers::Simple\r\n  config.logger           = Logger.new(STDOUT)\r\nend\r\n```\r\n\r\nThe key options available are:\r\n\r\n| Option  | Description                                                              \t\t  |\r\n| ------- | -------------------------------                                           \t  |\r\n| `beanstalk_url`  | Address such as 'beanstalk://127.0.0.1' or an array of addresses.    |\r\n| `tube_namespace` | Prefix used for all tubes related to this backburner queue.          |\r\n| `on_error`       | Lambda invoked with the error whenever any job in the system fails.  |\r\n| `default_worker` | Worker class that will be used if no other worker is specified.      |\r\n| `max_job_retries`| Integer defines how many times to retry a job before burying.        |\r\n| `retry_delay`    | Integer defines the base time to wait (in secs) between job retries. |\r\n| `logger`         | Logger recorded to when backburner wants to report info or errors.   |\r\n\r\n## Usage\r\n\r\nBackburner allows you to create jobs and place them on a beanstalk queue, and later pull those jobs off the queue and\r\nprocess them asynchronously.\r\n\r\n### Enqueuing Jobs ###\r\n\r\nAt the core, Backburner is about jobs that can be processed. Jobs are simple ruby objects with a method defined named `perform`.\r\n\r\nAny object which responds to `perform` can be queued as a job. Job objects are queued as JSON to be later processed by a task runner.\r\nHere's an example:\r\n\r\n```ruby\r\nclass NewsletterJob\r\n  include Backburner::Queue\r\n  queue \"newsletter\"  # defaults to 'newsletter-job'\r\n  queue_priority 1000 # most urgent priority is 0\r\n\r\n  def self.perform(email, body)\r\n    NewsletterMailer.deliver_text_to_email(email, body)\r\n  end\r\nend\r\n```\r\n\r\nNotice that you can include the optional `Backburner::Queue` module so you can specify a `queue` name for this job.\r\nJobs can be enqueued with:\r\n\r\n```ruby\r\nBackburner.enqueue NewsletterJob, 'foo@admin.com', 'lorem ipsum...'\r\n```\r\n\r\n`Backburner.enqueue` accepts first a ruby object that supports `perform` and then a series of parameters\r\nto that object's `perform` method. The queue name used by default is the normalized class name (i.e `{namespace}.newsletter-job`)\r\nif not otherwise specified.\r\n\r\n### Simple Async Jobs ###\r\n\r\nIn addition to defining custom jobs, a job can also be enqueued by invoking the `async` method on any object which\r\nincludes `Backburner::Performable`. Async enqueuing works for both instance and class methods on any _performable_ object.\r\n\r\n```ruby\r\nclass User\r\n  include Backburner::Performable\r\n  queue \"user-jobs\"  # defaults to 'user'\r\n  queue_priority 500 # most urgent priority is 0\r\n\r\n  def activate(device_id)\r\n    @device = Device.find(device_id)\r\n    # ...\r\n  end\r\n\r\n  def self.reset_password(user_id)\r\n    # ...\r\n  end\r\nend\r\n\r\n# Async works for instance methods on a persisted model\r\n@user = User.first\r\n@user.async(:ttr => 100, :queue => \"activate\").activate(@device.id)\r\n# ..as well as for class methods\r\nUser.async(:pri => 100, :delay => 10.seconds).reset_password(@user.id)\r\n```\r\n\r\nThis will automatically enqueue a job for that user record that will run `activate` with the specified argument.\r\nNote that you can set the queue name and queue priority at the class level and\r\nyou are also able to pass `pri`, `ttr`, `delay` and `queue` directly as options into `async`.\r\nThe queue name used by default is the normalized class name (i.e `{namespace}.user`) if not otherwise specified.\r\n\r\n### Working Jobs\r\n\r\nBackburner workers are processes that run forever handling jobs that get reserved. Starting a worker in ruby code is simple:\r\n\r\n```ruby\r\nBackburner.work\r\n```\r\n\r\nThis will process jobs in all queues but you can also restrict processing to specific queues:\r\n\r\n```ruby\r\nBackburner.work('newsletter_sender')\r\n```\r\n\r\nThe Backburner worker also exists as a rake task:\r\n\r\n```ruby\r\nrequire 'backburner/tasks'\r\n```\r\n\r\nso you can run:\r\n\r\n```\r\n$ QUEUES=newsletter-sender,push-message rake backburner:work\r\n```\r\n\r\nYou can also run the backburner binary for a convenient worker:\r\n\r\n```\r\nbundle exec backburner newsletter-sender,push-message -d -P /var/run/backburner.pid -l /var/log/backburner.log\r\n```\r\n\r\nThis will daemonize the worker and store the pid and logs automatically.\r\n\r\n### Processing Strategies\r\n\r\nIn Backburner, there are actually multiple different strategies for processing jobs\r\nwhich are reflected by multiple workers.\r\nCustom workers can be [defined fairly easily](https://github.com/nesquena/backburner/wiki/Defining-Workers).\r\nBy default, Backburner comes with the following workers built-in:\r\n\r\n| Worker | Description                                                                 |\r\n| ------- | -------------------------------                                            |\r\n| `Backburner::Workers::Simple` | Single threaded, no forking worker. Simplest option. |\r\n\r\nYou can select the default worker for processing with:\r\n\r\n```ruby\r\nBackburner.configure do |config|\r\n  config.default_worker = Backburner::Workers::Simple\r\nend\r\n```\r\n\r\nor determine the worker on the fly when invoking `work`:\r\n\r\n```ruby\r\nBackburner.work('newsletter_sender', :worker => Backburner::Workers::Threaded)\r\n```\r\n\r\nor when more official workers are supported, through alternate rake tasks.\r\nAdditional workers such as `threaded`, `forking` and `threads_on_fork` will hopefully be\r\ndeveloped in the future. If you are interested in helping, please let us know.\r\n\r\n### Default Queues\r\n\r\nWorkers can be easily restricted to processing only a specific set of queues as shown above. However, if you want a worker to\r\nprocess **all** queues instead, then you can leave the queue list blank.\r\n\r\nWhen you execute a worker without queues specified, any queue for a known job queue class with `include Backburner::Queue` will be processed.\r\nTo access the list of known queue classes, you can use:\r\n\r\n```ruby\r\nBackburner::Worker.known_queue_classes\r\n# => [NewsletterJob, SomeOtherJob]\r\n```\r\n\r\nDynamic queues created by passing queue options **will not be processed** by a default worker. For this reason, you may want to take control over the default list of\r\nqueues processed when none are specified. To do this, you can use the `default_queues` class method:\r\n\r\n```ruby\r\nBackburner.default_queues.concat([\"foo\", \"bar\"])\r\n```\r\n\r\nThis will ensure that the _foo_ and _bar_ queues are processed by default. You can also add job queue names:\r\n\r\n```ruby\r\nBackburner.default_queues << NewsletterJob.queue\r\n```\r\n\r\nThe `default_queues` stores the specific list of queues that should be processed by default by a worker.\r\n\r\n### Hooks\r\n\r\nBackburner is highly extensible and can be tailored to your needs by using various hooks that\r\ncan be triggered across the job processing lifecycle. \r\nOften using hooks is much easier then trying to monkey patch the externals. \r\n\r\nCheck out [HOOKS.md](https://github.com/nesquena/backburner/blob/master/HOOKS.md) for a detailed overview on using hooks.\r\n\r\n### Failures\r\n\r\nWhen a job fails in backburner (usually because an exception was raised), the job will be released \r\nand retried again (with progressive delays in between) until the `max_job_retries` configuration is reached.\r\n\r\n```ruby\r\nBackburner.configure do |config|\r\n  config.max_job_retries  = 3 # retry jobs 3 times\r\n  config.retry_delay      = 2 # wait 2 seconds in between retries\r\nend\r\n```\r\n\r\nNote the default `max_job_retries` is 0, meaning that by default **jobs are not retried**.\r\nIf continued retry attempts fail, the job will be buried and can be 'kicked' later for inspection.\r\n\r\nYou can also setup a custom error handler for jobs using configure:\r\n\r\n```ruby\r\nBackburner.configure do |config|\r\n  config.on_error = lambda { |ex| Airbrake.notify(ex) }\r\nend\r\n```\r\n\r\nNow all backburner queue errors will appear on airbrake for deeper inspection.\r\n\r\n### Logging\r\n\r\nLogging in backburner is rather simple. When a job is run, the log records that. When a job\r\nfails, the log records that. When any exceptions occur during processing, the log records that.\r\n\r\nBy default, the log will print to standard out. You can customize the log to output to any\r\nstandard logger by controlling the configuration option:\r\n\r\n```ruby\r\nBackburner.configure do |config|\r\n  config.logger = Logger.new(STDOUT)\r\nend\r\n```\r\n\r\nBe sure to check logs whenever things do not seem to be processing.\r\n\r\n### Web Front-end\r\n\r\nBe sure to check out the Sinatra-powered project [beanstalkd_view](https://github.com/denniskuczynski/beanstalkd_view)\r\nby [denniskuczynski](http://github.com/denniskuczynski) which provides an excellent overview of the tubes and\r\njobs processed by your beanstalk workers. An excellent addition to your Backburner setup.\r\n\r\n### Workers in Production\r\n\r\nOnce you have Backburner setup in your application, starting workers is really easy. Once [beanstalkd](http://kr.github.com/beanstalkd/download.html)\r\nis installed, your best bet is to use the built-in rake task that comes with Backburner. Simply add the task to your Rakefile:\r\n\r\n```ruby\r\n# Rakefile\r\nrequire 'backburner/tasks'\r\n```\r\n\r\nand then you can start the rake task with:\r\n\r\n```bash\r\n$ rake backburner:work\r\n$ QUEUES=newsletter-sender,push-message rake backburner:work\r\n```\r\n\r\nThe best way to deploy these rake tasks is using a monitoring library. We suggest [God](https://github.com/mojombo/god/)\r\nwhich watches processes and ensures their stability. A simple God recipe for Backburner can be found in\r\n[examples/god](https://github.com/nesquena/backburner/blob/master/examples/god.rb).\r\n\r\n## Acknowledgements\r\n\r\n * [Nathan Esquenazi](https://github.com/nesquena) - Project maintainer\r\n * Kristen Tucker - Coming up with the gem name\r\n * [Tim Lee](https://github.com/timothy1ee), [Josh Hull](https://github.com/joshbuddy), [Nico Taing](https://github.com/Nico-Taing) - Helping me work through the idea\r\n * [Miso](http://gomiso.com) - Open-source friendly place to work\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## References\r\n\r\nThe code in this project has been made in light of a few excellent projects:\r\n\r\n * [DelayedJob](https://github.com/collectiveidea/delayed_job)\r\n * [Resque](https://github.com/defunkt/resque)\r\n * [Stalker](https://github.com/han/stalker)\r\n\r\nThanks to these projects for inspiration and certain design and implementation decisions.\r\n\r\n## Links\r\n\r\n * Code: `git clone git://github.com/nesquena/backburner.git`\r\n * Home: <http://github.com/nesquena/backburner>\r\n * Docs: <http://rdoc.info/github/nesquena/backburner/master/frames>\r\n * Bugs: <http://github.com/nesquena/backburner/issues>\r\n * Gems: <http://gemcutter.org/gems/backburner>","note":"Don't delete this file! It's used internally to help with page regeneration."}